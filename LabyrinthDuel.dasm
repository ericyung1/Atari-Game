;===============================================================================
; Program Information
;===============================================================================

; Program:      Labyrinth Duel
; Program by:   Eric Yung
; Last Update:  12/14/2023

;===============================================================================
; Initialize dasm
;===============================================================================

    processor 6502
    include vcs.h       
    include macro.h

    
;===============================================================================
; Define RAM Usage
;===============================================================================

	SEG.U VARS ; define a segment for variables
	ORG $80 ; RAM starts at $80

Score:          ds 1    ; stored in $80
Timer:          ds 1    ; stored in $81
    ; Offsets into digit graphic data
DigitOnes:      ds 2    ; stored in $82-$83
DigitTens:      ds 2    ; stored in $84-$85
    ; graphic data ready to put into PF1
ScoreGfx:       ds 1    ; stored in $86
TimerGfx:       ds 1    ; stored in $87
Temp:           ds 1    ; stored in $88

;===============================================================================
; Define Start of Cartridge
;===============================================================================

	SEG CODE ; define a segment for code
	ORG $F800
		; 2K ROM starts at $F800
		; 4K ROM starts at $F000

;===============================================================================
; Initialize Atari
;===============================================================================
    
InitSystem:
    CLEAN_START ; set all RAM, TIA, and CPU registers to 0

;===============================================================================
; Main Program Loop
;===============================================================================

Main:
    jsr VerticalSync
    jsr VerticalBlank
    jsr Kernel
    jsr OverScan
    jmp Main
    
;===============================================================================
; Vertical Sync
;===============================================================================

VerticalSync:
    lda #2      ; load acc with 2 so D1=1
    ldx #49
    sta WSYNC
    sta VSYNC   ; turns on vsync signal
    stx TIM64T
    sta WSYNC   ; 1st line of vsync
    sta WSYNC   ; 2nd line of vsync
    lda #0
    sta WSYNC   ; 3rd line of vsync
    sta VSYNC   ; turns off vsync signal
    rts
     
;===============================================================================
; Vertical Blank
;===============================================================================

VerticalBlank:    
    jsr SetColors
    rts

;===============================================================================
; Kernel
;===============================================================================

Kernel:            
    sta WSYNC
    lda INTIM       ; check timer
    bne Kernel
    sta VBLANK
        
    ; draw the screen        
    ldx #192
KernelLoop:   
    sta WSYNC
    stx COLUBK      ; store X into TIAs bkg color register
    dex
    bne KernelLoop
    rts
        
;===============================================================================
; Overscan
;===============================================================================

OverScan:
    sta WSYNC
    lda #2      ; load accu with 2 so D1=1
    sta VBLANK  ; store acc to VBLANK, D1=1 turns image output off
    lda #32     ; set timer for 27 scanlines, 32 = ((27 * 76) / 64)
    sta TIM64T
waitForOverscan:
    sta WSYNC
    lda INTIM
    bne waitForOverscan
    rts    

;===============================================================================
; Color Table
; first 4 colors in the table correspond with color mode
; last 4 colors in the table correspond with black and white mode
;===============================================================================
SetColors:        
    ldx #3          ; set 4 colors (0-3)
    ldy #3
    lda SWCHB       ; state of console switch alters colors used
    and #%00001000
    bne ColorLoop
    ldy #7          ; else use the black and white colors (4-7)
ColorLoop:        
    lda Colors,y
    sta COLUP0,x
    dey
    dex
    bpl ColorLoop
    rts
    
Colors:   
    .byte $86   ; blue       - p0 and m0 color
    .byte $42   ; red        - p1 and m1 color
    .byte $0E   ; white      - PF and ball color
    .byte $00   ; black      - bkg color
    .byte $0E   ; white      - p0 and m0 color
    .byte $06   ; dark grey  - p1 and m1 color
    .byte $0A   ; light grey - PF and ball color
    .byte $00   ; black      - bkg color

;===============================================================================
; Digit Graphics
;-------------------------------------------------------------------------------
; changed to hexadecimal scoring (0-f)
; 0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f
;===============================================================================
        align 256
DigitGfx:
    .byte %01110111
    .byte %01010101
    .byte %01010101
    .byte %01010101
    .byte %01110111
    
    .byte %00010001
    .byte %00010001
    .byte %00010001
    .byte %00010001        
    .byte %00010001
    
    .byte %01110111
    .byte %00010001
    .byte %01110111
    .byte %01000100
    .byte %01110111
    
    .byte %01110111
    .byte %00010001
    .byte %00110011
    .byte %00010001
    .byte %01110111
    
    .byte %01010101
    .byte %01010101
    .byte %01110111
    .byte %00010001
    .byte %00010001
    
    .byte %01110111
    .byte %01000100
    .byte %01110111
    .byte %00010001
    .byte %01110111
        
    .byte %01110111
    .byte %01000100
    .byte %01110111
    .byte %01010101
    .byte %01110111
    
    .byte %01110111
    .byte %00010001
    .byte %00010001
    .byte %00010001
    .byte %00010001
    
    .byte %01110111
    .byte %01010101
    .byte %01110111
    .byte %01010101
    .byte %01110111
    
    .byte %01110111
    .byte %01010101
    .byte %01110111
    .byte %00010001
    .byte %01110111
    
    .byte %00100010
    .byte %01010101
    .byte %01110111
    .byte %01010101
    .byte %01010101
    
    .byte %01100110
    .byte %01010101
    .byte %01100110
    .byte %01010101
    .byte %01100110
    
    .byte %00110011
    .byte %01000100
    .byte %01000100
    .byte %01000100
    .byte %00110011
    
    .byte %01100110
    .byte %01010101
    .byte %01010101
    .byte %01010101
    .byte %01100110
    
    .byte %01110111
    .byte %01000100
    .byte %01100110
    .byte %01000100
    .byte %01110111
    
    .byte %01110111
    .byte %01000100
    .byte %01100110
    .byte %01000100
    .byte %01000100

;===============================================================================
; Space Remaining
;===============================================================================
        
 if (* & $FF)
    echo "------", [$FFFA - *]d, "ROM bytes left"
    align 256
  endif   
         
;===============================================================================
; Define End of Cartridge
;===============================================================================
    ORG $FFFA
    .WORD InitSystem ; NMI
    .WORD InitSystem ; RESET
    .WORD InitSystem ; IRQ